import tkinter as tk
from tkinter import ttk

import matplotlib
matplotlib.use("TkAgg")
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
import matplotlib.animation as animation

from matplotlib.ticker import AutoMinorLocator, FixedLocator

import numpy as np


import time
from astropy.time import Time

from threading import Thread


from astropy.coordinates import SkyCoord, AltAz, EarthLocation
from astropy import units as u
from astropy.time import Time

class GalacticMap(tk.Frame):
    #Frame containing controls for detector integration

    

    def __init__(self, master, bd, width, height):
        super().__init__(master, bd=bd, width=width, height=height)
        self.grid()

        # Observatory location parameters 
        self.LONGITUDE = 12.556672
        self.LATITUDE = 55.701223
        self.HEIGHT = 0  # in meters

        # Optional refraction correction parameters
        self.PRESSURE = None
        self.TEMPERATURE = None
        self.HUMIDITY = None
        self.WAVELENGTH = 21.106  # cm

        # Precompute the observer location
        self.obs_loc = EarthLocation(
            lat=self.LATITUDE * u.deg,
            lon=self.LONGITUDE * u.deg,
            height=self.HEIGHT * u.m
        )


        #Create variables for time display and time format
        self.time_format_string = "%d/%m/%Y %H:%M:%S"

        self.timevar = tk.StringVar(self, value=time.strftime(self.time_format_string, time.gmtime()))

        #Create pointing display label
        self.pointing_disp_label = tk.Label(self, text="Pointing and Time Display")

        #Create labels for the current time display
        self.time_disp_label = tk.Label(self, text="Current Time (UTC):")
        self.clock_label = tk.Label(self, textvariable=self.timevar)

        #Create Figure and canvas with polar projection
        self.fig = Figure(figsize=(5, 5), dpi=100)

        self.fig.suptitle("Telescope Pointing")

        self.axes = self.fig.add_subplot(111, polar=True)

        self.axes.set_theta_zero_location("N")

        self.axes.xaxis.set_major_locator(FixedLocator(np.pi / 180 * np.array([0, 45, 90, 135, 180, 225, 270, 315])))


        self.axes.set_ylim(90, -16)
        self.axes.set_yticks([-15, 0, 30, 60, 75])
        self.axes.set_yticklabels(["", r"0$\degree$", r"30$\degree$", r"60$\degree$", r"75$\degree$"])
        

        self.canvas = FigureCanvasTkAgg(self.fig, master=self)

        self.update_pointing_plot()

        #Arrange elements

        self.time_disp_label.grid(column=0, row=0, padx=4, pady=2, sticky="w")
        self.clock_label.grid(column=1, row=0, padx=4, pady=2, sticky="w")

        self.canvas.get_tk_widget().grid(column=0, row=1, columnspan=2, pady=2, padx=4, sticky="nw")

        #Begin update cycles
        self.clock_thread = Thread(target=self.update_clock_display, daemon=True)
        self.clock_thread.start()

        self.pointing_disp_thread = Thread(target=self.update_pointing_display, daemon=True)
        self.pointing_disp_thread.start()


    def update_clock_display(self):
        #Update the clock every second, including clock and pointing plot

        self.update_clock_label()

        time.sleep(0.5) #Including some allowance for update times
        self.update_clock_display()


    def update_pointing_display(self):
        #Update the pointing plot every 0.5 seconds


        self.update_pointing_plot()

        time.sleep(0.5)
        self.update_pointing_display()

    def update_clock_label(self):
        #Update the clock variable with the current UTC time

        self.timevar.set(time.strftime(self.time_format_string, time.gmtime()))
        self.clock_label.update()

    def convert_galactic_coords(self, L, B):
        """
        Convert Galactic (L, B) coordinates to horizontal (Az, El) coordinates.
        
        Returns:
            current_time_iso (str): Current time in ISO format.
            az (float): Calculated azimuth (in degrees, before offset).
            el (float): Calculated elevation (in degrees).
        """
        current_time = Time.now()
        galactic_coord = SkyCoord(l=L * u.deg, b=B * u.deg, frame='galactic')
        equatorial_coord = galactic_coord.icrs

        altaz_frame = AltAz(
            obstime=current_time,
            location=self.obs_loc,
            pressure=self.PRESSURE,
            temperature=self.TEMPERATURE,
            relative_humidity=self.HUMIDITY,
            obswl=self.WAVELENGTH * u.cm
        )
        horizontal_coord = equatorial_coord.transform_to(altaz_frame)
        return current_time.iso, horizontal_coord.az.degree, horizontal_coord.alt.degree
        

    def update_pointing_plot(self):
        #Update pointing plot with current rotor coordinates and galactic plane location

        self.clear_plotted_objects()


        
        GALACTIC_PLANE_LONGITUDES = np.arange(0, 361, 1)
        GALACTIC_PLANE_LATITUDES = np.array([10, 5, 0, -5, -10])
        colours = ["orangered", "darkorange", "b",  "darkviolet", "mediumslateblue"]

        __, galactic_center_az, galactic_center_el = self.convert_galactic_coords(L=0, B=0)
        if galactic_center_el >= 0:
            self.axes.plot(galactic_center_az, galactic_center_el, "r+", label="Galactic Center")

        for i in range(len(GALACTIC_PLANE_LATITUDES)):

            b = GALACTIC_PLANE_LATITUDES[i]
            colour = colours[i]

            galactic_azs = []
            galactic_els = []
        
            __, az, el = self.convert_galactic_coords(L=GALACTIC_PLANE_LONGITUDES, B=b)
    

            galactic_azs = (np.array(az) * u.degree).to(u.radian).value
            galactic_els = np.array(el)

            visible_galactic_plane_azs = galactic_azs[np.where(galactic_els >=0)]
            visible_galactic_plane_els = galactic_els[np.where(galactic_els >=0)]
   

            self.axes.plot(visible_galactic_plane_azs, visible_galactic_plane_els, color=colour, linestyle="-", label=f"b = {b}")

        self.fig.legend(loc="outside lower left")

        self.canvas.draw()


    def clear_plotted_objects(self):
        #Remove all objects from self.axes

        for artist in self.axes.ArtistList(self.axes, prop_name="issue"):
            artist.remove()

    

        






root = tk.Tk()

root.title("GalacticMap")
root.geometry("510x550")



observatory_interface = GalacticMap(root, bd=0, width=550, height=510)
observatory_interface.mainloop()
